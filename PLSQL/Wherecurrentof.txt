DECLARE 
CURSOR sal_cursor IS 
 SELECT department_id, employee_id, last_name, salary 
 FROM   employees 
where department_id = 60 
 FOR UPDATE OF salary NOWAIT; 
 BEGIN 
 FOR emp_record IN sal_cursor 
LOOP 
  IF emp_record.salary < 5000 THEN 
  	UPDATE employees 
 	SET    salary = emp_record.salary * 1.10 
 	WHERE CURRENT OF sal_cursor; 
  END IF; 
END LOOP; 
END;
/



=======


Write a PL/SQL block to declare a variable called v_salary to store the salary of an employee. In the executable part of the program, do the following:
Store an employee name in a  iSQL*Plus substitution variable 
	SET SERVEROUTPUT ON
   	    DEFINE P_LASTNAME = Pataballa
Store his or her salary in the v_salary variable
If the salary is less than 3,000, give the employee a raise of 500 and display the message '<Employee Name>’s salary updated' in the window.
If the salary is more than 3,000, print the employee’s salary in the format, '<Employee Name> earns …...………'
Test the PL/SQL for the last names
		Note: Undefine the variable that stores the employee’s name at the end of the script.
   
   DECLARE
	   V_SALARY NUMBER(7,2);
	   V_LASTNAME EMPLOYEES.LAST_NAME%TYPE;
   BEGIN
	   SELECT salary INTO V_SALARY
	   FROM employees 
     WHERE last_name = INITCAP('&&P_LASTNAME') FOR UPDATE of salary;	
V_LASTNAME := INITCAP('&P_LASTNAME');
	IF V_SALARY < 3000 THEN
		UPDATE employees SET salary = salary + 500
		WHERE last_name =  INITCAP('&P_LASTNAME') ;
		DBMS_OUTPUT.PUT_LINE (V_LASTNAME || '''s salary updated');
	ELSE
		DBMS_OUTPUT.PUT_LINE (V_LASTNAME  || ' earns ' || 

TO_CHAR(V_SALARY));
	END IF;
END;
/ 

==========
Update the department ID of the employee with the new department number, and update the salary with 	    the new salary. Use the EMP table for the updates. Once the update is complete, display the message, 	  	     ‘Update complete’ in the window. If no matching records are found, display the message, ‘No Data 	    	     Found’. Test the PL/SQL.
DECLARE
	V_EMPNO emp.EMPLOYEE_ID%TYPE := &P_EMPNO;
	V_NEW_DEPTNO emp.DEPARTMENT_ID%TYPE := & P_NEW_DEPTNO;
	V_PER_INCREASE NUMBER(7,2) := &P_PER_INCREASE;
BEGIN
		UPDATE emp
		SET department_id = V_NEW_DEPTNO,
                    salary = salary + (salary* V_PER_INCREASE/100)
		WHERE employee_id = V_EMPNO;	
		IF SQL%ROWCOUNT = 0 THEN
		  DBMS_OUTPUT.PUT_LINE ('No Data Found');
    ELSE	
		  DBMS_OUTPUT.PUT_LINE ('Update Complete');
		END IF;	
END;
/	

========

a. Create a PL/SQL block that declares a cursor called DATE_CUR. Pass a parameter of DATE data 	    type to the cursor and print the details of all employees who have joined after that date. 
	  SET SERVEROUTPUT ON
 	  DEFINE P_HIREDATE = 08-MAR-00
b.  Test the PL/SQL  block for the following hire dates: 08-MAR-00, 25-JUN-97, 28-SEP-98, 	    07-FEB-99.
DECLARE
	CURSOR DATE_CURSOR(JOIN_DATE DATE) IS
	SELECT employee_id,last_name,hire_date FROM employees
	WHERE HIRE_DATE >JOIN_DATE ;
	V_EMPNO   employees.employee_id%TYPE;
	V_ENAME   employees.last_name%TYPE;
      	V_HIREDATE employees.hire_date%TYPE;
	V_DATE employees.hire_date%TYPE :=   '&P_HIREDATE';
BEGIN
 	OPEN DATE_CURSOR(V_DATE);
	LOOP
	  FETCH DATE_CURSOR INTO V_EMPNO,V_ENAME,V_HIREDATE;
     EXIT WHEN DATE_CURSOR%NOTFOUND;
	  DBMS_OUTPUT.PUT_LINE (V_EMPNO || ' ' || V_ENAME || ' ' || 
			     V_HIREDATE);
     END LOOP;
 END;
/
SET SERVEROUTPUT OFF; 
========



Create a PL/SQL block to promote clerks who earn more than 3,000 to SR. CLERK and increase their salary by 10%. Use the EMP table for this practice. Verify the results by querying on the EMP table.
Hint: Use a cursor with FOR UPDATE and CURRENT OF syntax.






















DECLARE
	CURSOR C_Senior_Clerk IS
	SELECT employee_id,job_id FROM emp
	WHERE job_id = 'ST_CLERK' AND salary > 3000
	FOR UPDATE OF job_id;
BEGIN
	FOR V_Emrec IN C_Senior_Clerk 
	LOOP
		UPDATE emp
		SET job_id = 'ST_CLERK',
		salary = 1.1 * salary
		WHERE CURRENT OF C_Senior_Clerk;
	END LOOP;
	COMMIT;
END;
/
SELECT * FROM emp;

